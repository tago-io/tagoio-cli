import { Account } from "@tago-io/sdk";
import { OTPType } from "@tago-io/sdk/out/modules/Account/account.types";
import { keyInSelect, question, questionEMail } from "readline-sync";
import { errorHandler, highlightMSG, questionMSG, successMSG } from "../lib/messages";
import { writeToken } from "../lib/token";

function writeCustomToken(environment: string, token: string) {
  writeToken(token, environment);
  console.info(`Token writed to the environment ${environment}`);
}

interface LoginOptions {
  email?: string;
  password?: string;
  token?: string;
}

async function handleOTPLogin({ otp_autosend }: { otp_autosend: OTPType }, { email, password }: Required<LoginOptions>) {
  if (otp_autosend !== "authenticator") {
    await Account.requestLoginPINCode({ email, password }, otp_autosend).then(console.log, console.log);
  }

  const pinCode = question(questionMSG(`Enter your PINCODE [${otp_autosend}]: `));

  const loginResult = await Account.login({ email, password, otp_type: otp_autosend, pin_code: pinCode } as any).catch(errorHandler);
  if (loginResult) {
    return { ...loginResult, otp_type: otp_autosend, pin_code: pinCode };
  }
}

async function tagoLogin(environment: string, options: LoginOptions) {
  // const prompt = PromptSync({});
  if (options.token) {
    return writeCustomToken(environment, options.token);
  }

  let { email, password } = options;

  if (!email) {
    email = questionEMail(questionMSG("Enter your email: "));
  }
  if (!password) {
    password = question(questionMSG("Enter your password: "), { hideEchoBack: true });
  }

  const loginResult = await Account.login({ email, password }).catch(async (error) => {
    try {
      const errorJSON = JSON.parse(error);
      if (errorJSON?.otp_enabled) {
        return handleOTPLogin(errorJSON, { email: email as string, password: password as string, token: "" }).catch(errorHandler);
      }
    } catch {
      //any
    }

    errorHandler(error);
  });

  if (!loginResult) {
    return;
  }

  const profileList = loginResult.profiles.map((x) => `${x.name}${highlightMSG((x as any).from_share ? " [Shared with you]" : "")}`);
  const profileIndex = keyInSelect(profileList, questionMSG("Which profile you want to choose? "), { cancel: true });

  const result = await Account.tokenCreate({
    email,
    password,
    expire_time: "never",
    otp_type: (loginResult as any)?.otp_type || undefined,
    name: "Generated by TagoIO CLI",
    pin_code: (loginResult as any)?.pin_code || undefined,
    profile_id: loginResult.profiles[profileIndex].id,
  } as any).catch(errorHandler);

  if (!result) {
    return;
  }

  writeToken(result.token, environment);

  successMSG(`Token writed to the environment ${highlightMSG(environment)}`);
  options.token = result.token;
}

export { tagoLogin };
